#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FindImages
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="suzadb")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProductsColors(ProductsColors instance);
    partial void UpdateProductsColors(ProductsColors instance);
    partial void DeleteProductsColors(ProductsColors instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertOutputPriceListCategory(OutputPriceListCategory instance);
    partial void UpdateOutputPriceListCategory(OutputPriceListCategory instance);
    partial void DeleteOutputPriceListCategory(OutputPriceListCategory instance);
    partial void InsertOutputPriceList(OutputPriceList instance);
    partial void UpdateOutputPriceList(OutputPriceList instance);
    partial void DeleteOutputPriceList(OutputPriceList instance);
    partial void InsertBannedImagesSite(BannedImagesSite instance);
    partial void UpdateBannedImagesSite(BannedImagesSite instance);
    partial void DeleteBannedImagesSite(BannedImagesSite instance);
    partial void InsertProductsVideo(ProductsVideo instance);
    partial void UpdateProductsVideo(ProductsVideo instance);
    partial void DeleteProductsVideo(ProductsVideo instance);
    partial void InsertBannedImage(BannedImage instance);
    partial void UpdateBannedImage(BannedImage instance);
    partial void DeleteBannedImage(BannedImage instance);
    partial void InsertProductsImage(ProductsImage instance);
    partial void UpdateProductsImage(ProductsImage instance);
    partial void DeleteProductsImage(ProductsImage instance);
    partial void InsertSettings(Settings instance);
    partial void UpdateSettings(Settings instance);
    partial void DeleteSettings(Settings instance);
    partial void InsertSites(Sites instance);
    partial void UpdateSites(Sites instance);
    partial void DeleteSites(Sites instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::FindImages.Properties.Settings.Default.suzadbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ProductsColors> ProductsColors
		{
			get
			{
				return this.GetTable<ProductsColors>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<OutputPriceListCategory> OutputPriceListCategories
		{
			get
			{
				return this.GetTable<OutputPriceListCategory>();
			}
		}
		
		public System.Data.Linq.Table<OutputPriceList> OutputPriceLists
		{
			get
			{
				return this.GetTable<OutputPriceList>();
			}
		}
		
		public System.Data.Linq.Table<BannedImagesSite> BannedImagesSites
		{
			get
			{
				return this.GetTable<BannedImagesSite>();
			}
		}
		
		public System.Data.Linq.Table<ProductsVideo> ProductsVideos
		{
			get
			{
				return this.GetTable<ProductsVideo>();
			}
		}
		
		public System.Data.Linq.Table<BannedImage> BannedImages
		{
			get
			{
				return this.GetTable<BannedImage>();
			}
		}
		
		public System.Data.Linq.Table<ProductsImage> ProductsImages
		{
			get
			{
				return this.GetTable<ProductsImage>();
			}
		}
		
		public System.Data.Linq.Table<Settings> Settings
		{
			get
			{
				return this.GetTable<Settings>();
			}
		}
		
		public System.Data.Linq.Table<Sites> Sites
		{
			get
			{
				return this.GetTable<Sites>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProductWithOutImage", IsComposable=true)]
		public IQueryable<Product> GetProductWithOutImage()
		{
			return this.CreateMethodCallQuery<Product>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetProductImage")]
		public int SetProductImage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SiteProductId", DbType="Int")] System.Nullable<int> siteProductId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ImageId", DbType="Int")] System.Nullable<int> imageId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), siteProductId, imageId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetProductWithOutYoutube", IsComposable=true)]
		public IQueryable<Product> GetProductWithOutYoutube()
		{
			return this.CreateMethodCallQuery<Product>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductsColors")]
	public partial class ProductsColors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorId;
		
		private string _ColorName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    #endregion
		
		public ProductsColors()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorName", DbType="NVarChar(40)")]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductsColors_Product", Storage="_Products", ThisKey="ColorId", OtherKey="ColorId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductsColors = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductsColors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prices")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriceId;
		
		private System.Guid _ProductID;
		
		private int _PriceListID;
		
		private int _PriceListWorksheetID;
		
		private string _PriceListProductName;
		
		private double _InputPrice;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _IDinPriceList;
		
		private string _Garanty;
		
		private int _Availability;
		
		private bool _isConst;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIdChanging(int value);
    partial void OnPriceIdChanged();
    partial void OnProductIDChanging(System.Guid value);
    partial void OnProductIDChanged();
    partial void OnPriceListIDChanging(int value);
    partial void OnPriceListIDChanged();
    partial void OnPriceListWorksheetIDChanging(int value);
    partial void OnPriceListWorksheetIDChanged();
    partial void OnPriceListProductNameChanging(string value);
    partial void OnPriceListProductNameChanged();
    partial void OnInputPriceChanging(double value);
    partial void OnInputPriceChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnIDinPriceListChanging(string value);
    partial void OnIDinPriceListChanged();
    partial void OnGarantyChanging(string value);
    partial void OnGarantyChanged();
    partial void OnAvailabilityChanging(int value);
    partial void OnAvailabilityChanged();
    partial void OnisConstChanging(bool value);
    partial void OnisConstChanged();
    #endregion
		
		public Price()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PriceId
		{
			get
			{
				return this._PriceId;
			}
			set
			{
				if ((this._PriceId != value))
				{
					this.OnPriceIdChanging(value);
					this.SendPropertyChanging();
					this._PriceId = value;
					this.SendPropertyChanged("PriceId");
					this.OnPriceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListID", DbType="Int NOT NULL")]
		public int PriceListID
		{
			get
			{
				return this._PriceListID;
			}
			set
			{
				if ((this._PriceListID != value))
				{
					this.OnPriceListIDChanging(value);
					this.SendPropertyChanging();
					this._PriceListID = value;
					this.SendPropertyChanged("PriceListID");
					this.OnPriceListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListWorksheetID", DbType="Int NOT NULL")]
		public int PriceListWorksheetID
		{
			get
			{
				return this._PriceListWorksheetID;
			}
			set
			{
				if ((this._PriceListWorksheetID != value))
				{
					this.OnPriceListWorksheetIDChanging(value);
					this.SendPropertyChanging();
					this._PriceListWorksheetID = value;
					this.SendPropertyChanged("PriceListWorksheetID");
					this.OnPriceListWorksheetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListProductName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PriceListProductName
		{
			get
			{
				return this._PriceListProductName;
			}
			set
			{
				if ((this._PriceListProductName != value))
				{
					this.OnPriceListProductNameChanging(value);
					this.SendPropertyChanging();
					this._PriceListProductName = value;
					this.SendPropertyChanged("PriceListProductName");
					this.OnPriceListProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputPrice", DbType="Float NOT NULL")]
		public double InputPrice
		{
			get
			{
				return this._InputPrice;
			}
			set
			{
				if ((this._InputPrice != value))
				{
					this.OnInputPriceChanging(value);
					this.SendPropertyChanging();
					this._InputPrice = value;
					this.SendPropertyChanged("InputPrice");
					this.OnInputPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDinPriceList", DbType="NVarChar(255)")]
		public string IDinPriceList
		{
			get
			{
				return this._IDinPriceList;
			}
			set
			{
				if ((this._IDinPriceList != value))
				{
					this.OnIDinPriceListChanging(value);
					this.SendPropertyChanging();
					this._IDinPriceList = value;
					this.SendPropertyChanged("IDinPriceList");
					this.OnIDinPriceListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Garanty", DbType="NVarChar(25)")]
		public string Garanty
		{
			get
			{
				return this._Garanty;
			}
			set
			{
				if ((this._Garanty != value))
				{
					this.OnGarantyChanging(value);
					this.SendPropertyChanging();
					this._Garanty = value;
					this.SendPropertyChanged("Garanty");
					this.OnGarantyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Availability", DbType="Int NOT NULL")]
		public int Availability
		{
			get
			{
				return this._Availability;
			}
			set
			{
				if ((this._Availability != value))
				{
					this.OnAvailabilityChanging(value);
					this.SendPropertyChanging();
					this._Availability = value;
					this.SendPropertyChanged("Availability");
					this.OnAvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConst", DbType="Bit NOT NULL")]
		public bool isConst
		{
			get
			{
				return this._isConst;
			}
			set
			{
				if ((this._isConst != value))
				{
					this.OnisConstChanging(value);
					this.SendPropertyChanging();
					this._isConst = value;
					this.SendPropertyChanged("isConst");
					this.OnisConstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Price", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(System.Guid);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProductID;
		
		private int _SiteProductId;
		
		private string _ProductFullName;
		
		private string _PartNumber;
		
		private int _ManufacturerID;
		
		private string _Summary;
		
		private string _Keywords;
		
		private string _MetaDescription;
		
		private System.DateTime _DateAdded;
		
		private int _Category2;
		
		private bool _isChanged;
		
		private bool _isPriceChanged;
		
		private bool _isCategoryChecked;
		
		private System.Nullable<int> _icecatid;
		
		private bool _isNameChecked;
		
		private bool _BestPrice;
		
		private string _Summary2;
		
		private System.Nullable<int> _ImageId;
		
		private int _ColorId;
		
		private System.Nullable<int> _VideoId;
		
		private EntitySet<Price> _Prices;
		
		private EntityRef<ProductsColors> _ProductsColors;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(System.Guid value);
    partial void OnProductIDChanged();
    partial void OnSiteProductIdChanging(int value);
    partial void OnSiteProductIdChanged();
    partial void OnProductFullNameChanging(string value);
    partial void OnProductFullNameChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnCategory2Changing(int value);
    partial void OnCategory2Changed();
    partial void OnisChangedChanging(bool value);
    partial void OnisChangedChanged();
    partial void OnisPriceChangedChanging(bool value);
    partial void OnisPriceChangedChanged();
    partial void OnisCategoryCheckedChanging(bool value);
    partial void OnisCategoryCheckedChanged();
    partial void OnicecatidChanging(System.Nullable<int> value);
    partial void OnicecatidChanged();
    partial void OnisNameCheckedChanging(bool value);
    partial void OnisNameCheckedChanged();
    partial void OnBestPriceChanging(bool value);
    partial void OnBestPriceChanged();
    partial void OnSummary2Changing(string value);
    partial void OnSummary2Changed();
    partial void OnImageIdChanging(System.Nullable<int> value);
    partial void OnImageIdChanged();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnVideoIdChanging(System.Nullable<int> value);
    partial void OnVideoIdChanged();
    #endregion
		
		public Product()
		{
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._ProductsColors = default(EntityRef<ProductsColors>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteProductId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SiteProductId
		{
			get
			{
				return this._SiteProductId;
			}
			set
			{
				if ((this._SiteProductId != value))
				{
					this.OnSiteProductIdChanging(value);
					this.SendPropertyChanging();
					this._SiteProductId = value;
					this.SendPropertyChanged("SiteProductId");
					this.OnSiteProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductFullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProductFullName
		{
			get
			{
				return this._ProductFullName;
			}
			set
			{
				if ((this._ProductFullName != value))
				{
					this.OnProductFullNameChanging(value);
					this.SendPropertyChanging();
					this._ProductFullName = value;
					this.SendPropertyChanged("ProductFullName");
					this.OnProductFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(80)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaDescription", DbType="NVarChar(800) NOT NULL", CanBeNull=false)]
		public string MetaDescription
		{
			get
			{
				return this._MetaDescription;
			}
			set
			{
				if ((this._MetaDescription != value))
				{
					this.OnMetaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MetaDescription = value;
					this.SendPropertyChanged("MetaDescription");
					this.OnMetaDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category2", DbType="Int NOT NULL")]
		public int Category2
		{
			get
			{
				return this._Category2;
			}
			set
			{
				if ((this._Category2 != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory2Changing(value);
					this.SendPropertyChanging();
					this._Category2 = value;
					this.SendPropertyChanged("Category2");
					this.OnCategory2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isChanged", DbType="Bit NOT NULL")]
		public bool isChanged
		{
			get
			{
				return this._isChanged;
			}
			set
			{
				if ((this._isChanged != value))
				{
					this.OnisChangedChanging(value);
					this.SendPropertyChanging();
					this._isChanged = value;
					this.SendPropertyChanged("isChanged");
					this.OnisChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPriceChanged", DbType="Bit NOT NULL")]
		public bool isPriceChanged
		{
			get
			{
				return this._isPriceChanged;
			}
			set
			{
				if ((this._isPriceChanged != value))
				{
					this.OnisPriceChangedChanging(value);
					this.SendPropertyChanging();
					this._isPriceChanged = value;
					this.SendPropertyChanged("isPriceChanged");
					this.OnisPriceChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCategoryChecked", DbType="Bit NOT NULL")]
		public bool isCategoryChecked
		{
			get
			{
				return this._isCategoryChecked;
			}
			set
			{
				if ((this._isCategoryChecked != value))
				{
					this.OnisCategoryCheckedChanging(value);
					this.SendPropertyChanging();
					this._isCategoryChecked = value;
					this.SendPropertyChanged("isCategoryChecked");
					this.OnisCategoryCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icecatid", DbType="Int")]
		public System.Nullable<int> icecatid
		{
			get
			{
				return this._icecatid;
			}
			set
			{
				if ((this._icecatid != value))
				{
					this.OnicecatidChanging(value);
					this.SendPropertyChanging();
					this._icecatid = value;
					this.SendPropertyChanged("icecatid");
					this.OnicecatidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isNameChecked", DbType="Bit NOT NULL")]
		public bool isNameChecked
		{
			get
			{
				return this._isNameChecked;
			}
			set
			{
				if ((this._isNameChecked != value))
				{
					this.OnisNameCheckedChanging(value);
					this.SendPropertyChanging();
					this._isNameChecked = value;
					this.SendPropertyChanged("isNameChecked");
					this.OnisNameCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BestPrice", DbType="Bit NOT NULL")]
		public bool BestPrice
		{
			get
			{
				return this._BestPrice;
			}
			set
			{
				if ((this._BestPrice != value))
				{
					this.OnBestPriceChanging(value);
					this.SendPropertyChanging();
					this._BestPrice = value;
					this.SendPropertyChanged("BestPrice");
					this.OnBestPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary2", DbType="NVarChar(800)")]
		public string Summary2
		{
			get
			{
				return this._Summary2;
			}
			set
			{
				if ((this._Summary2 != value))
				{
					this.OnSummary2Changing(value);
					this.SendPropertyChanging();
					this._Summary2 = value;
					this.SendPropertyChanged("Summary2");
					this.OnSummary2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", DbType="Int")]
		public System.Nullable<int> ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL")]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._ProductsColors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoId", DbType="Int")]
		public System.Nullable<int> VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Price", Storage="_Prices", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductsColors_Product", Storage="_ProductsColors", ThisKey="ColorId", OtherKey="ColorId", IsForeignKey=true)]
		public ProductsColors ProductsColors
		{
			get
			{
				return this._ProductsColors.Entity;
			}
			set
			{
				ProductsColors previousValue = this._ProductsColors.Entity;
				if (((previousValue != value) 
							|| (this._ProductsColors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductsColors.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductsColors.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ColorId = value.ColorId;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("ProductsColors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="Category2", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._Category2 = value.Id;
					}
					else
					{
						this._Category2 = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ParentId;
		
		private string _CategoryName;
		
		private bool _IsPublic;
		
		private double _SortOrder;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<OutputPriceListCategory> _OutputPriceListCategories;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    partial void OnSortOrderChanging(double value);
    partial void OnSortOrderChanged();
    #endregion
		
		public Category()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._OutputPriceListCategories = new EntitySet<OutputPriceListCategory>(new Action<OutputPriceListCategory>(this.attach_OutputPriceListCategories), new Action<OutputPriceListCategory>(this.detach_OutputPriceListCategories));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(100)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Float NOT NULL")]
		public double SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="Id", OtherKey="Category2")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_OutputPriceListCategory", Storage="_OutputPriceListCategories", ThisKey="Id", OtherKey="CategoryID")]
		public EntitySet<OutputPriceListCategory> OutputPriceListCategories
		{
			get
			{
				return this._OutputPriceListCategories;
			}
			set
			{
				this._OutputPriceListCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_OutputPriceListCategories(OutputPriceListCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_OutputPriceListCategories(OutputPriceListCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutputPriceListCategories")]
	public partial class OutputPriceListCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OutputPriceListCategoryID;
		
		private int _OutputPriceListID;
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private string _Markup;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<OutputPriceList> _OutputPriceList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutputPriceListCategoryIDChanging(int value);
    partial void OnOutputPriceListCategoryIDChanged();
    partial void OnOutputPriceListIDChanging(int value);
    partial void OnOutputPriceListIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnMarkupChanging(string value);
    partial void OnMarkupChanged();
    #endregion
		
		public OutputPriceListCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._OutputPriceList = default(EntityRef<OutputPriceList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutputPriceListCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OutputPriceListCategoryID
		{
			get
			{
				return this._OutputPriceListCategoryID;
			}
			set
			{
				if ((this._OutputPriceListCategoryID != value))
				{
					this.OnOutputPriceListCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._OutputPriceListCategoryID = value;
					this.SendPropertyChanged("OutputPriceListCategoryID");
					this.OnOutputPriceListCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutputPriceListID", DbType="Int NOT NULL")]
		public int OutputPriceListID
		{
			get
			{
				return this._OutputPriceListID;
			}
			set
			{
				if ((this._OutputPriceListID != value))
				{
					if (this._OutputPriceList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutputPriceListIDChanging(value);
					this.SendPropertyChanging();
					this._OutputPriceListID = value;
					this.SendPropertyChanged("OutputPriceListID");
					this.OnOutputPriceListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Markup", DbType="NVarChar(7)")]
		public string Markup
		{
			get
			{
				return this._Markup;
			}
			set
			{
				if ((this._Markup != value))
				{
					this.OnMarkupChanging(value);
					this.SendPropertyChanging();
					this._Markup = value;
					this.SendPropertyChanged("Markup");
					this.OnMarkupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_OutputPriceListCategory", Storage="_Category", ThisKey="CategoryID", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.OutputPriceListCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.OutputPriceListCategories.Add(this);
						this._CategoryID = value.Id;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutputPriceList_OutputPriceListCategory", Storage="_OutputPriceList", ThisKey="OutputPriceListID", OtherKey="OutputPriceId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public OutputPriceList OutputPriceList
		{
			get
			{
				return this._OutputPriceList.Entity;
			}
			set
			{
				OutputPriceList previousValue = this._OutputPriceList.Entity;
				if (((previousValue != value) 
							|| (this._OutputPriceList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutputPriceList.Entity = null;
						previousValue.OutputPriceListCategories.Remove(this);
					}
					this._OutputPriceList.Entity = value;
					if ((value != null))
					{
						value.OutputPriceListCategories.Add(this);
						this._OutputPriceListID = value.OutputPriceId;
					}
					else
					{
						this._OutputPriceListID = default(int);
					}
					this.SendPropertyChanged("OutputPriceList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutputPriceList")]
	public partial class OutputPriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OutputPriceId;
		
		private string _CatalogName;
		
		private int _SiteId;
		
		private string _GeneratingShedule;
		
		private EntitySet<OutputPriceListCategory> _OutputPriceListCategories;
		
		private EntityRef<Sites> _Sites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutputPriceIdChanging(int value);
    partial void OnOutputPriceIdChanged();
    partial void OnCatalogNameChanging(string value);
    partial void OnCatalogNameChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnGeneratingSheduleChanging(string value);
    partial void OnGeneratingSheduleChanged();
    #endregion
		
		public OutputPriceList()
		{
			this._OutputPriceListCategories = new EntitySet<OutputPriceListCategory>(new Action<OutputPriceListCategory>(this.attach_OutputPriceListCategories), new Action<OutputPriceListCategory>(this.detach_OutputPriceListCategories));
			this._Sites = default(EntityRef<Sites>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutputPriceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutputPriceId
		{
			get
			{
				return this._OutputPriceId;
			}
			set
			{
				if ((this._OutputPriceId != value))
				{
					this.OnOutputPriceIdChanging(value);
					this.SendPropertyChanging();
					this._OutputPriceId = value;
					this.SendPropertyChanged("OutputPriceId");
					this.OnOutputPriceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CatalogName
		{
			get
			{
				return this._CatalogName;
			}
			set
			{
				if ((this._CatalogName != value))
				{
					this.OnCatalogNameChanging(value);
					this.SendPropertyChanging();
					this._CatalogName = value;
					this.SendPropertyChanged("CatalogName");
					this.OnCatalogNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Sites.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneratingShedule", DbType="NVarChar(50)")]
		public string GeneratingShedule
		{
			get
			{
				return this._GeneratingShedule;
			}
			set
			{
				if ((this._GeneratingShedule != value))
				{
					this.OnGeneratingSheduleChanging(value);
					this.SendPropertyChanging();
					this._GeneratingShedule = value;
					this.SendPropertyChanged("GeneratingShedule");
					this.OnGeneratingSheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutputPriceList_OutputPriceListCategory", Storage="_OutputPriceListCategories", ThisKey="OutputPriceId", OtherKey="OutputPriceListID")]
		public EntitySet<OutputPriceListCategory> OutputPriceListCategories
		{
			get
			{
				return this._OutputPriceListCategories;
			}
			set
			{
				this._OutputPriceListCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sites_OutputPriceList", Storage="_Sites", ThisKey="SiteId", OtherKey="SiteId", IsForeignKey=true)]
		public Sites Sites
		{
			get
			{
				return this._Sites.Entity;
			}
			set
			{
				Sites previousValue = this._Sites.Entity;
				if (((previousValue != value) 
							|| (this._Sites.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sites.Entity = null;
						previousValue.OutputPriceList.Remove(this);
					}
					this._Sites.Entity = value;
					if ((value != null))
					{
						value.OutputPriceList.Add(this);
						this._SiteId = value.SiteId;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Sites");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OutputPriceListCategories(OutputPriceListCategory entity)
		{
			this.SendPropertyChanging();
			entity.OutputPriceList = this;
		}
		
		private void detach_OutputPriceListCategories(OutputPriceListCategory entity)
		{
			this.SendPropertyChanging();
			entity.OutputPriceList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannedImagesSites")]
	public partial class BannedImagesSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BannedHost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannedHostChanging(string value);
    partial void OnBannedHostChanged();
    #endregion
		
		public BannedImagesSite()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannedHost", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BannedHost
		{
			get
			{
				return this._BannedHost;
			}
			set
			{
				if ((this._BannedHost != value))
				{
					this.OnBannedHostChanging(value);
					this.SendPropertyChanging();
					this._BannedHost = value;
					this.SendPropertyChanged("BannedHost");
					this.OnBannedHostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductsVideos")]
	public partial class ProductsVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoId;
		
		private bool _VideoChecked;
		
		private string _Link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    partial void OnVideoCheckedChanging(bool value);
    partial void OnVideoCheckedChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    #endregion
		
		public ProductsVideo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoChecked", DbType="Bit NOT NULL")]
		public bool VideoChecked
		{
			get
			{
				return this._VideoChecked;
			}
			set
			{
				if ((this._VideoChecked != value))
				{
					this.OnVideoCheckedChanging(value);
					this.SendPropertyChanging();
					this._VideoChecked = value;
					this.SendPropertyChanged("VideoChecked");
					this.OnVideoCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannedImages")]
	public partial class BannedImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BannedImage1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBannedImage1Changing(string value);
    partial void OnBannedImage1Changed();
    #endregion
		
		public BannedImage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BannedImage", Storage="_BannedImage1", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string BannedImage1
		{
			get
			{
				return this._BannedImage1;
			}
			set
			{
				if ((this._BannedImage1 != value))
				{
					this.OnBannedImage1Changing(value);
					this.SendPropertyChanging();
					this._BannedImage1 = value;
					this.SendPropertyChanged("BannedImage1");
					this.OnBannedImage1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductsImages")]
	public partial class ProductsImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private bool _ImageChecked;
		
		private string _ImageHost;
		
		private System.DateTime _LastModified;
		
		private System.Guid _WhoConfirm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnImageCheckedChanging(bool value);
    partial void OnImageCheckedChanged();
    partial void OnImageHostChanging(string value);
    partial void OnImageHostChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnWhoConfirmChanging(System.Guid value);
    partial void OnWhoConfirmChanged();
    #endregion
		
		public ProductsImage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageChecked", DbType="Bit NOT NULL")]
		public bool ImageChecked
		{
			get
			{
				return this._ImageChecked;
			}
			set
			{
				if ((this._ImageChecked != value))
				{
					this.OnImageCheckedChanging(value);
					this.SendPropertyChanging();
					this._ImageChecked = value;
					this.SendPropertyChanged("ImageChecked");
					this.OnImageCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageHost", DbType="NVarChar(250)")]
		public string ImageHost
		{
			get
			{
				return this._ImageHost;
			}
			set
			{
				if ((this._ImageHost != value))
				{
					this.OnImageHostChanging(value);
					this.SendPropertyChanging();
					this._ImageHost = value;
					this.SendPropertyChanged("ImageHost");
					this.OnImageHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhoConfirm", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WhoConfirm
		{
			get
			{
				return this._WhoConfirm;
			}
			set
			{
				if ((this._WhoConfirm != value))
				{
					this.OnWhoConfirmChanging(value);
					this.SendPropertyChanging();
					this._WhoConfirm = value;
					this.SendPropertyChanged("WhoConfirm");
					this.OnWhoConfirmChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Settings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SettingName;
		
		private string _SettingValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public Settings()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingName", DbType="NVarChar(50)")]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingValue", DbType="NVarChar(250)")]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sites")]
	public partial class Sites : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteId;
		
		private string _SiteURL;
		
		private string _FTPPath;
		
		private string _FTPServer;
		
		private string _FTPUsername;
		
		private string _FTPPass;
		
		private string _ImagesPath;
		
		private bool _ResizeImages;
		
		private System.Nullable<int> _SmallBigSize;
		
		private System.Nullable<int> _MedBigSize;
		
		private EntitySet<OutputPriceList> _OutputPriceList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnSiteURLChanging(string value);
    partial void OnSiteURLChanged();
    partial void OnFTPPathChanging(string value);
    partial void OnFTPPathChanged();
    partial void OnFTPServerChanging(string value);
    partial void OnFTPServerChanged();
    partial void OnFTPUsernameChanging(string value);
    partial void OnFTPUsernameChanged();
    partial void OnFTPPassChanging(string value);
    partial void OnFTPPassChanged();
    partial void OnImagesPathChanging(string value);
    partial void OnImagesPathChanged();
    partial void OnResizeImagesChanging(bool value);
    partial void OnResizeImagesChanged();
    partial void OnSmallBigSizeChanging(System.Nullable<int> value);
    partial void OnSmallBigSizeChanged();
    partial void OnMedBigSizeChanging(System.Nullable<int> value);
    partial void OnMedBigSizeChanged();
    #endregion
		
		public Sites()
		{
			this._OutputPriceList = new EntitySet<OutputPriceList>(new Action<OutputPriceList>(this.attach_OutputPriceList), new Action<OutputPriceList>(this.detach_OutputPriceList));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteURL", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string SiteURL
		{
			get
			{
				return this._SiteURL;
			}
			set
			{
				if ((this._SiteURL != value))
				{
					this.OnSiteURLChanging(value);
					this.SendPropertyChanging();
					this._SiteURL = value;
					this.SendPropertyChanged("SiteURL");
					this.OnSiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FTPPath", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FTPPath
		{
			get
			{
				return this._FTPPath;
			}
			set
			{
				if ((this._FTPPath != value))
				{
					this.OnFTPPathChanging(value);
					this.SendPropertyChanging();
					this._FTPPath = value;
					this.SendPropertyChanged("FTPPath");
					this.OnFTPPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FTPServer", DbType="NVarChar(50)")]
		public string FTPServer
		{
			get
			{
				return this._FTPServer;
			}
			set
			{
				if ((this._FTPServer != value))
				{
					this.OnFTPServerChanging(value);
					this.SendPropertyChanging();
					this._FTPServer = value;
					this.SendPropertyChanged("FTPServer");
					this.OnFTPServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FTPUsername", DbType="NVarChar(20)")]
		public string FTPUsername
		{
			get
			{
				return this._FTPUsername;
			}
			set
			{
				if ((this._FTPUsername != value))
				{
					this.OnFTPUsernameChanging(value);
					this.SendPropertyChanging();
					this._FTPUsername = value;
					this.SendPropertyChanged("FTPUsername");
					this.OnFTPUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FTPPass", DbType="NVarChar(20)")]
		public string FTPPass
		{
			get
			{
				return this._FTPPass;
			}
			set
			{
				if ((this._FTPPass != value))
				{
					this.OnFTPPassChanging(value);
					this.SendPropertyChanging();
					this._FTPPass = value;
					this.SendPropertyChanged("FTPPass");
					this.OnFTPPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagesPath", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ImagesPath
		{
			get
			{
				return this._ImagesPath;
			}
			set
			{
				if ((this._ImagesPath != value))
				{
					this.OnImagesPathChanging(value);
					this.SendPropertyChanging();
					this._ImagesPath = value;
					this.SendPropertyChanged("ImagesPath");
					this.OnImagesPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResizeImages", DbType="Bit NOT NULL")]
		public bool ResizeImages
		{
			get
			{
				return this._ResizeImages;
			}
			set
			{
				if ((this._ResizeImages != value))
				{
					this.OnResizeImagesChanging(value);
					this.SendPropertyChanging();
					this._ResizeImages = value;
					this.SendPropertyChanged("ResizeImages");
					this.OnResizeImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmallBigSize", DbType="Int")]
		public System.Nullable<int> SmallBigSize
		{
			get
			{
				return this._SmallBigSize;
			}
			set
			{
				if ((this._SmallBigSize != value))
				{
					this.OnSmallBigSizeChanging(value);
					this.SendPropertyChanging();
					this._SmallBigSize = value;
					this.SendPropertyChanged("SmallBigSize");
					this.OnSmallBigSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedBigSize", DbType="Int")]
		public System.Nullable<int> MedBigSize
		{
			get
			{
				return this._MedBigSize;
			}
			set
			{
				if ((this._MedBigSize != value))
				{
					this.OnMedBigSizeChanging(value);
					this.SendPropertyChanging();
					this._MedBigSize = value;
					this.SendPropertyChanged("MedBigSize");
					this.OnMedBigSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sites_OutputPriceList", Storage="_OutputPriceList", ThisKey="SiteId", OtherKey="SiteId")]
		public EntitySet<OutputPriceList> OutputPriceList
		{
			get
			{
				return this._OutputPriceList;
			}
			set
			{
				this._OutputPriceList.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OutputPriceList(OutputPriceList entity)
		{
			this.SendPropertyChanging();
			entity.Sites = this;
		}
		
		private void detach_OutputPriceList(OutputPriceList entity)
		{
			this.SendPropertyChanging();
			entity.Sites = null;
		}
	}
}
#pragma warning restore 1591
